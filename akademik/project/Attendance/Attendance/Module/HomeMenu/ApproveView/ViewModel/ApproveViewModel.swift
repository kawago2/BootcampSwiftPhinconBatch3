//
//  ApproveViewModel.swift
//  Attendance
//
//  Created by Phincon on 29/12/23.
//

import Foundation
import RxSwift
import RxCocoa

// MARK: - ApproveViewModel

class ApproveViewModel {
    var permissionData: [PermissionForm] = []
    var completedPermission: [PermissionForm] = []
    var currentSortBy = ""
    var showAlert = PublishSubject<(String, String)>()
    
    // MARK: - Data Fetching
    
    func getData(completionHandler: @escaping (Result<Void, Error>) -> Void) {
        permissionData = []
        let collectionGroupPath = "data"
        
        FirebaseManager.shared.getAllDocumentsFromSubcollection(collectionGroupPath: collectionGroupPath) { result in
            switch result {
            case .success(let documents):
                for document in documents {
                    let data = document.data()
                    var permissionForm = PermissionForm()
                    permissionForm.fromDictionary(dictionary: data)
                    self.permissionData.append(permissionForm)
                }
                completionHandler(.success(()))
            case .failure(let error):
                completionHandler(.failure(error))
            }
        }
    }
    
    // MARK: - Approval Logic
    
    func validatorLogic(permissionDate: Date, currentDate: Date) -> Bool {
        let calendar = Calendar.current
        if let difference = calendar.dateComponents([.weekOfYear], from: currentDate, to: permissionDate).weekOfYear {
            return difference >= 1
        }
        return false
    }

    func firebaseEditForApproval() {
 
    }
    
    func approvalLogic(forRowAt indexPath: IndexPath, completionHandler: @escaping (Result<Void, Error>) -> Void) {
        let permissionItem = completedPermission[indexPath.row]
        
        let collection = "permissions"
        let subCollection = "data"
        
        let currentDate = Date()
        let result = validatorLogic(permissionDate: permissionItem.permissionTime ?? Date(), currentDate: currentDate)
        if result {
            let dataUpdate: [String: Any] = [
                "approvalTime" : currentDate,
                "status" : PermissionStatus.approved.rawValue
            ]
            
            if let uid = permissionItem.applicantID, let id = permissionItem.autoGeneratedID {
                FirebaseManager.shared.editDataInSubcollection(documentID: uid, inCollection: collection, subcollectionPath: subCollection, documentIDToEdit: id, newData: dataUpdate) { result in
                    switch result {
                    case .success:
                        completionHandler(.success(()))
                    case .failure(let error):
                        completionHandler(.failure(error))
                    }
                }
            }
        } else {
            showAlert.onNext(("Invalid", "Approve/Reject can only be done if it's 1 week before the permission time"))
        }
       
    }
    
    // MARK: - Sorting Methods
    
    func sortByStatus(sortby: String) {
        switch sortby.lowercased() {
        case PermissionStatus.approved.rawValue.lowercased():
            completedPermission = permissionData.filter { $0.status == .approved }
        case PermissionStatus.rejected.rawValue.lowercased():
            completedPermission = permissionData.filter { $0.status == .rejected }
        case PermissionStatus.submitted.rawValue.lowercased():
            completedPermission = permissionData.filter { $0.status == .submitted }
        default:
            completedPermission = permissionData
        }
    }

    func sortByDate(sortby: String) {
        switch sortby {
        case DateSortOption.oldest.rawValue.lowercased():
            completedPermission = completedPermission.sorted { $0.permissionTime ?? Date() < $1.permissionTime ?? Date() }
        case DateSortOption.newest.rawValue.lowercased():
            completedPermission = completedPermission.sorted { $0.permissionTime ?? Date() > $1.permissionTime ?? Date() }
        default:
            break
        }
    }
}
