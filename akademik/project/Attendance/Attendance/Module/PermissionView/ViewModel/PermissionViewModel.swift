//
//  PermissionViewModel.swift
//  Attendance
//
//  Created by Phincon on 29/12/23.
//

import Foundation
import RxSwift

// MARK: - PermissionViewModel

class PermissionViewModel {
    
    // MARK: - Properties
    
    var currentSortBy = ""
    var permissionData: [PermissionForm] = []
    var filterPermission: [PermissionForm] = []
    
    let showAlert = PublishSubject<(String, String)>()
    
    // MARK: - Methods
    
    func getData(completionHandler: @escaping (Result<Void, Error>) -> Void) {
        permissionData = []
        guard let uid = FirebaseManager.shared.getCurrentUserUid() else {
            return
        }
        
        let documentID = uid
        let inCollection = "permissions"
        let subcollectionPath = "data"
        
        FirebaseManager.shared.getDataFromSubcollection(documentID: documentID, inCollection: inCollection, subcollectionPath: subcollectionPath) { result in
            switch result {
            case .success(let documents):
                for document in documents {
                    if let data = document.data() {
                        var permissionForm = PermissionForm()
                        permissionForm.fromDictionary(dictionary: data)
                        self.permissionData.append(permissionForm)
                    }
                }
                completionHandler(.success(()))
            case .failure(let error):
                completionHandler(.failure(error))
            }
        }
    }
    
    func deleteData(at index: Int, completionHandler: @escaping (Result<Void, Error>) -> Void) {
        guard let uid = FirebaseManager.shared.getCurrentUserUid() else {
            return
        }
        let permissionItem = filterPermission[index]
        if let status = permissionItem.status {
            if status != .submitted {
                showAlert.onNext(("Warning", "When form has been validated, can't be deleted."))
                return
            }
        }
        
        let documentID = uid
        let collection = "permissions"
        let subcollectionPath = "data"
        let deletedDocumentID = permissionItem.autoGeneratedID ?? ""
        FirebaseManager.shared.deleteDataFromSubcollectionWithAutoID(documentID: documentID, inCollection: collection, subcollectionPath: subcollectionPath, autoGeneratedID: deletedDocumentID) { result in
            switch result {
            case .success:
                completionHandler(.success(()))
            case .failure(let error):
                completionHandler(.failure(error))
            }
        }
    }
    
    func addData(item: PermissionAdd, completionHandler: @escaping (Result<Void, Error>) -> Void) {
        guard let uid = FirebaseManager.shared.getCurrentUserUid() else { return }
        let documentID = uid
        let inCollection = "permissions"
        let subcollectionPath = "data"
        
        let permission = PermissionForm(
            applicantID: uid,
            type: item.type,
            submissionTime: Date(),
            permissionTime: item.permissionDate,
            status: .submitted,
            additionalInfo: PermissionForm.AdditionalInfo(
                reason: item.reason,
                duration: item.duration
            )
        )
        
        let dataPermission = permission.toDictionary()
        
        FirebaseManager.shared.addDataToSubcollectionWithAutoID(documentID: documentID, inCollection: inCollection, subcollectionPath: subcollectionPath, data: dataPermission) {result in
            switch result {
            case .success:
                completionHandler(.success(()))
            case .failure(let error):
                completionHandler(.failure(error))
            }
        }
    }
    
    func sortByStatus(sortby: String) {
        switch sortby.lowercased() {
        case PermissionStatus.approved.rawValue.lowercased():
            filterPermission = permissionData.filter { $0.status == .approved }
        case PermissionStatus.rejected.rawValue.lowercased():
            filterPermission = permissionData.filter { $0.status == .rejected }
        case PermissionStatus.submitted.rawValue.lowercased():
            filterPermission = permissionData.filter { $0.status == .submitted }
        default:
            filterPermission = permissionData
        }
    }
    
    func sortByDate(sortby: String) {
        switch sortby {
        case DateSortOption.oldest.rawValue.lowercased():
            filterPermission = filterPermission.sorted { $0.permissionTime ?? Date() < $1.permissionTime ?? Date() }
        case DateSortOption.newest.rawValue.lowercased():
            filterPermission = filterPermission.sorted { $0.permissionTime ?? Date() > $1.permissionTime ?? Date() }
        default:
            break
        }
    }
}
